/*
 * Ship Routing API
 *
 * Access the global ship routing service via a RESTful API
 *
 * API version: 0.0.1
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package main

import (
	"flag"
	"log"
	"net/http"
	"os"
	"path"
	"runtime"

	server "github.com/natevvv/osm-ship-routing/pkg/server/openapi_server"
)

func main() {
	targetGraph := flag.String("graph", "road_graph", "选择要使用的图")
	navigator := flag.String("navigator", "contraction-hierarchies", "选择导航器类型")
	port := flag.String("port", "8081", "服务端口")
	flag.Parse()

	_, filename, _, ok := runtime.Caller(0)
	if !ok {
		log.Fatal("Error")
	}

	directory := path.Dir(filename)
	graphDirectory := path.Join(directory, "..", "..", "graphs", *targetGraph)

	if _, err := os.Stat(graphDirectory); os.IsNotExist(err) {
		log.Fatal("图目录不存在")
	} else {
		log.Printf("使用图目录: %v\n", graphDirectory)
	}

	plainGraphFile := path.Join(graphDirectory, "road_graph.fmi")
	contractedGraphFile := path.Join(graphDirectory, "road_graph_contracted.fmi")
	shortcutFile := path.Join(graphDirectory, "road_shortcuts.txt")
	nodeOrderingFile := path.Join(graphDirectory, "road_node_ordering.txt")

	log.Printf("正在加载图 '%s' 到内存", plainGraphFile)

	config := server.NavigatorConfig{
		UseSpeedProfile: true,  // 使用道路速度配置
		ConsiderTraffic: true,  // 考虑交通状况
		AvoidTolls:      false, // 是否避开收费道路
		VehicleType:     "car", // 车辆类型
		PreferHighway:   true,  // 偏好高速公路
	}

	DefaultApiService := server.NewDefaultApiService(plainGraphFile, contractedGraphFile,
		shortcutFile, nodeOrderingFile, navigator, config)
	DefaultApiController := server.NewDefaultApiController(DefaultApiService)

	router := server.NewRouter(DefaultApiController)
	log.Printf("服务已启动 @ http://localhost:%s", *port)

	log.Fatal(http.ListenAndServe(":"+*port, router))
}
